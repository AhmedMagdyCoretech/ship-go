package ship

import (
	"log"
	"testing"
	"time"

	"github.com/enbility/ship-go/spine"
	spineModel "github.com/enbility/ship-go/spine/model"
	"go.uber.org/mock/gomock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

// test the whole handshake process

func TestHandshakeSuite(t *testing.T) {
	suite.Run(t, new(HandshakeSuite))
}

/*
	type FakeDataConnection struct {
		mux sync.Mutex

		sentMessage      []byte
		remoteConnection *ShipConnection
	}

var _ ShipDataConnection = (*FakeDataConnection)(nil)

func (s *FakeDataConnection) InitDataProcessing(dataProcessing ShipDataProcessing) {}

	func (s *FakeDataConnection) WriteMessageToDataConnection(message []byte) error {
		s.mux.Lock()
		defer s.mux.Unlock()

		s.sentMessage = message
		go func() {
			time.Sleep(time.Millisecond * 200)
			s.remoteConnection.HandleIncomingShipMessage(message)
		}()
		return nil
	}

func (s *FakeDataConnection) CloseDataConnection()                  {}
func (s *FakeDataConnection) IsDataConnectionClosed() (bool, error) { return false, nil }
*/
type HandshakeSuite struct {
	suite.Suite

	localDataProvider *MockShipServiceDataProvider
	localDataConn     *MockShipDataConnection
	localSut          *ShipConnection
	// localDataConn     *FakeDataConnection

	remoteDataProvider *MockShipServiceDataProvider
	remoteDataConn     *MockShipDataConnection
	remoteSut          *ShipConnection
	// remoteDataConn     *FakeDataConnection
}

func (s *HandshakeSuite) BeforeTest(suiteName, testName string) {
	// setup the local device and connection
	localDevice := spine.NewDeviceLocalImpl("TestBrandName", "TestDeviceModel", "TestSerialNumber", "TestDeviceCode",
		"TestDeviceAddress", spineModel.DeviceTypeTypeEnergyManagementSystem, spineModel.NetworkManagementFeatureSetTypeSmart)

	ctrl := gomock.NewController(s.T())

	s.localDataProvider = NewMockShipServiceDataProvider(ctrl)
	s.localDataProvider.
		EXPECT().
		HandleShipHandshakeStateUpdate(gomock.Any(), gomock.Any()).
		Do(func(ski string, state ShipState) {
			log.Println("server state:", state.State)
		}).
		AnyTimes()
	s.localDataProvider.EXPECT().HandleConnectionClosed(gomock.Any(), gomock.Any()).AnyTimes()

	s.localDataConn = NewMockShipDataConnection(ctrl)
	s.localDataConn.EXPECT().InitDataProcessing(gomock.Any())
	s.localDataConn.EXPECT().IsDataConnectionClosed().DoAndReturn(func() (bool, error) { return false, nil }).AnyTimes()
	s.localDataConn.EXPECT().CloseDataConnection().AnyTimes()

	// s.localDataConn = &FakeDataConnection{}

	s.localSut = NewConnectionHandler(s.localDataProvider, s.localDataConn, localDevice, ShipRoleServer, "LocalShipID", "RemoveDevice", "RemoteShipID", false)
	// s.localSut.stopHandshakeTimer()

	// setup the remote device and connection
	remoteDevice := spine.NewDeviceLocalImpl("TestBrandName2", "TestDeviceModel2", "TestSerialNumber2", "TestDeviceCode2",
		"TestDeviceAddress2", spineModel.DeviceTypeTypeChargingStation, spineModel.NetworkManagementFeatureSetTypeSmart)

	s.remoteDataProvider = NewMockShipServiceDataProvider(ctrl)
	s.remoteDataProvider.
		EXPECT().
		HandleShipHandshakeStateUpdate(gomock.Any(), gomock.Any()).
		Do(func(ski string, state ShipState) {
			log.Println("client state:", state.State)
		}).
		AnyTimes()
	s.remoteDataProvider.EXPECT().HandleConnectionClosed(gomock.Any(), gomock.Any()).AnyTimes()

	s.remoteDataConn = NewMockShipDataConnection(ctrl)
	s.remoteDataConn.EXPECT().InitDataProcessing(gomock.Any())
	s.remoteDataConn.EXPECT().IsDataConnectionClosed().DoAndReturn(func() (bool, error) { return false, nil }).AnyTimes()
	s.remoteDataConn.EXPECT().CloseDataConnection().AnyTimes()

	// s.remoteDataConn = &FakeDataConnection{}

	s.remoteSut = NewConnectionHandler(s.remoteDataProvider, s.remoteDataConn, remoteDevice, ShipRoleClient, "RemoteShipID", "LocalDevice", "LocalShipID", false)
	// s.remoteSut.stopHandshakeTimer()

	// s.localDataConn.remoteConnection = s.remoteSut
	// s.remoteDataConn.remoteConnection = s.localSut

	s.localDataConn.
		EXPECT().
		WriteMessageToDataConnection(gomock.Any()).
		Do(func(message []byte) {
			if len(message) > 2 {
				log.Println("server send:", string(message[1:]))
			} else {
				log.Println("server send: init")
			}
			go func() {
				time.Sleep(time.Millisecond * 50)
				s.remoteSut.HandleIncomingShipMessage(message)
			}()
		}).
		AnyTimes()

	s.remoteDataConn.
		EXPECT().
		WriteMessageToDataConnection(gomock.Any()).
		Do(func(message []byte) {
			if len(message) > 2 {
				log.Println("client send:", string(message[1:]))
			} else {
				log.Println("client send: init")
			}
			go func() {
				time.Sleep(time.Millisecond * 200)
				s.localSut.HandleIncomingShipMessage(message)
			}()
		}).
		AnyTimes()
}

func (s *HandshakeSuite) AfterTest(suiteName, testName string) {
	s.localSut.stopHandshakeTimer()
	s.remoteSut.stopHandshakeTimer()
}

func (s *HandshakeSuite) TestHandshakeProcess_BothTrusted() {
	// go s.localSut.handleShipMessage(false, nil)
	// go s.remoteSut.handleShipMessage(false, nil)

	go func() {
		s.localDataProvider.EXPECT().IsRemoteServiceForSKIPaired(gomock.Any()).Return(true).AnyTimes()
		s.remoteDataProvider.EXPECT().IsRemoteServiceForSKIPaired(gomock.Any()).Return(true).AnyTimes()
		assert.Equal(s.T(), CmiStateInitStart, s.localSut.getState())
		assert.Equal(s.T(), CmiStateInitStart, s.remoteSut.getState())

		log.Println("start local server")
		s.localSut.Run()

		log.Println("start remote client")
		s.remoteSut.Run()
	}()

	// go func() {
	// 	assert.Equal(s.T(), CmiStateServerWait, s.localSut.getState())
	// }()
	// time.Sleep(time.Second * 1)

	// go func() {
	// 	assert.Equal(s.T(), CmiStateClientWait, s.remoteSut.getState())
	// }()

	time.Sleep(time.Second * 5)
	// assert.Equal(s.T(), SmeComplete, s.localSut.getState())
}
