// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enbility/ship-go/api (interfaces: MdnsService)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mockgen_api.go -package=mocks github.com/enbility/ship-go/api MdnsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/enbility/ship-go/api"
	gomock "go.uber.org/mock/gomock"
)

// MockMdnsService is a mock of MdnsService interface.
type MockMdnsService struct {
	ctrl     *gomock.Controller
	recorder *MockMdnsServiceMockRecorder
}

// MockMdnsServiceMockRecorder is the mock recorder for MockMdnsService.
type MockMdnsServiceMockRecorder struct {
	mock *MockMdnsService
}

// NewMockMdnsService creates a new mock instance.
func NewMockMdnsService(ctrl *gomock.Controller) *MockMdnsService {
	mock := &MockMdnsService{ctrl: ctrl}
	mock.recorder = &MockMdnsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMdnsService) EXPECT() *MockMdnsServiceMockRecorder {
	return m.recorder
}

// AnnounceMdnsEntry mocks base method.
func (m *MockMdnsService) AnnounceMdnsEntry() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceMdnsEntry")
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnounceMdnsEntry indicates an expected call of AnnounceMdnsEntry.
func (mr *MockMdnsServiceMockRecorder) AnnounceMdnsEntry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceMdnsEntry", reflect.TypeOf((*MockMdnsService)(nil).AnnounceMdnsEntry))
}

// RegisterMdnsSearch mocks base method.
func (m *MockMdnsService) RegisterMdnsSearch(arg0 api.MdnsSearch) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMdnsSearch", arg0)
}

// RegisterMdnsSearch indicates an expected call of RegisterMdnsSearch.
func (mr *MockMdnsServiceMockRecorder) RegisterMdnsSearch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMdnsSearch", reflect.TypeOf((*MockMdnsService)(nil).RegisterMdnsSearch), arg0)
}

// SetAutoAccept mocks base method.
func (m *MockMdnsService) SetAutoAccept(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoAccept", arg0)
}

// SetAutoAccept indicates an expected call of SetAutoAccept.
func (mr *MockMdnsServiceMockRecorder) SetAutoAccept(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoAccept", reflect.TypeOf((*MockMdnsService)(nil).SetAutoAccept), arg0)
}

// SetupMdnsService mocks base method.
func (m *MockMdnsService) SetupMdnsService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupMdnsService")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupMdnsService indicates an expected call of SetupMdnsService.
func (mr *MockMdnsServiceMockRecorder) SetupMdnsService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupMdnsService", reflect.TypeOf((*MockMdnsService)(nil).SetupMdnsService))
}

// ShutdownMdnsService mocks base method.
func (m *MockMdnsService) ShutdownMdnsService() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShutdownMdnsService")
}

// ShutdownMdnsService indicates an expected call of ShutdownMdnsService.
func (mr *MockMdnsServiceMockRecorder) ShutdownMdnsService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownMdnsService", reflect.TypeOf((*MockMdnsService)(nil).ShutdownMdnsService))
}

// UnannounceMdnsEntry mocks base method.
func (m *MockMdnsService) UnannounceMdnsEntry() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnannounceMdnsEntry")
}

// UnannounceMdnsEntry indicates an expected call of UnannounceMdnsEntry.
func (mr *MockMdnsServiceMockRecorder) UnannounceMdnsEntry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnannounceMdnsEntry", reflect.TypeOf((*MockMdnsService)(nil).UnannounceMdnsEntry))
}

// UnregisterMdnsSearch mocks base method.
func (m *MockMdnsService) UnregisterMdnsSearch(arg0 api.MdnsSearch) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterMdnsSearch", arg0)
}

// UnregisterMdnsSearch indicates an expected call of UnregisterMdnsSearch.
func (mr *MockMdnsServiceMockRecorder) UnregisterMdnsSearch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterMdnsSearch", reflect.TypeOf((*MockMdnsService)(nil).UnregisterMdnsSearch), arg0)
}
