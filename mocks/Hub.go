// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/ship-go/api"
	mock "github.com/stretchr/testify/mock"
)

// Hub is an autogenerated mock type for the Hub type
type Hub struct {
	mock.Mock
}

type Hub_Expecter struct {
	mock *mock.Mock
}

func (_m *Hub) EXPECT() *Hub_Expecter {
	return &Hub_Expecter{mock: &_m.Mock}
}

// CancelPairingWithSKI provides a mock function with given fields: ski
func (_m *Hub) CancelPairingWithSKI(ski string) {
	_m.Called(ski)
}

// Hub_CancelPairingWithSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelPairingWithSKI'
type Hub_CancelPairingWithSKI_Call struct {
	*mock.Call
}

// CancelPairingWithSKI is a helper method to define mock.On call
//   - ski string
func (_e *Hub_Expecter) CancelPairingWithSKI(ski interface{}) *Hub_CancelPairingWithSKI_Call {
	return &Hub_CancelPairingWithSKI_Call{Call: _e.mock.On("CancelPairingWithSKI", ski)}
}

func (_c *Hub_CancelPairingWithSKI_Call) Run(run func(ski string)) *Hub_CancelPairingWithSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Hub_CancelPairingWithSKI_Call) Return() *Hub_CancelPairingWithSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_CancelPairingWithSKI_Call) RunAndReturn(run func(string)) *Hub_CancelPairingWithSKI_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectSKI provides a mock function with given fields: ski, reason
func (_m *Hub) DisconnectSKI(ski string, reason string) {
	_m.Called(ski, reason)
}

// Hub_DisconnectSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectSKI'
type Hub_DisconnectSKI_Call struct {
	*mock.Call
}

// DisconnectSKI is a helper method to define mock.On call
//   - ski string
//   - reason string
func (_e *Hub_Expecter) DisconnectSKI(ski interface{}, reason interface{}) *Hub_DisconnectSKI_Call {
	return &Hub_DisconnectSKI_Call{Call: _e.mock.On("DisconnectSKI", ski, reason)}
}

func (_c *Hub_DisconnectSKI_Call) Run(run func(ski string, reason string)) *Hub_DisconnectSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Hub_DisconnectSKI_Call) Return() *Hub_DisconnectSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_DisconnectSKI_Call) RunAndReturn(run func(string, string)) *Hub_DisconnectSKI_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePairingWithSKI provides a mock function with given fields: ski
func (_m *Hub) InitiatePairingWithSKI(ski string) {
	_m.Called(ski)
}

// Hub_InitiatePairingWithSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePairingWithSKI'
type Hub_InitiatePairingWithSKI_Call struct {
	*mock.Call
}

// InitiatePairingWithSKI is a helper method to define mock.On call
//   - ski string
func (_e *Hub_Expecter) InitiatePairingWithSKI(ski interface{}) *Hub_InitiatePairingWithSKI_Call {
	return &Hub_InitiatePairingWithSKI_Call{Call: _e.mock.On("InitiatePairingWithSKI", ski)}
}

func (_c *Hub_InitiatePairingWithSKI_Call) Run(run func(ski string)) *Hub_InitiatePairingWithSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Hub_InitiatePairingWithSKI_Call) Return() *Hub_InitiatePairingWithSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_InitiatePairingWithSKI_Call) RunAndReturn(run func(string)) *Hub_InitiatePairingWithSKI_Call {
	_c.Call.Return(run)
	return _c
}

// PairingDetailForSki provides a mock function with given fields: ski
func (_m *Hub) PairingDetailForSki(ski string) *api.ConnectionStateDetail {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for PairingDetailForSki")
	}

	var r0 *api.ConnectionStateDetail
	if rf, ok := ret.Get(0).(func(string) *api.ConnectionStateDetail); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ConnectionStateDetail)
		}
	}

	return r0
}

// Hub_PairingDetailForSki_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PairingDetailForSki'
type Hub_PairingDetailForSki_Call struct {
	*mock.Call
}

// PairingDetailForSki is a helper method to define mock.On call
//   - ski string
func (_e *Hub_Expecter) PairingDetailForSki(ski interface{}) *Hub_PairingDetailForSki_Call {
	return &Hub_PairingDetailForSki_Call{Call: _e.mock.On("PairingDetailForSki", ski)}
}

func (_c *Hub_PairingDetailForSki_Call) Run(run func(ski string)) *Hub_PairingDetailForSki_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Hub_PairingDetailForSki_Call) Return(_a0 *api.ConnectionStateDetail) *Hub_PairingDetailForSki_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hub_PairingDetailForSki_Call) RunAndReturn(run func(string) *api.ConnectionStateDetail) *Hub_PairingDetailForSki_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRemoteSKI provides a mock function with given fields: ski, enable
func (_m *Hub) RegisterRemoteSKI(ski string, enable bool) {
	_m.Called(ski, enable)
}

// Hub_RegisterRemoteSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRemoteSKI'
type Hub_RegisterRemoteSKI_Call struct {
	*mock.Call
}

// RegisterRemoteSKI is a helper method to define mock.On call
//   - ski string
//   - enable bool
func (_e *Hub_Expecter) RegisterRemoteSKI(ski interface{}, enable interface{}) *Hub_RegisterRemoteSKI_Call {
	return &Hub_RegisterRemoteSKI_Call{Call: _e.mock.On("RegisterRemoteSKI", ski, enable)}
}

func (_c *Hub_RegisterRemoteSKI_Call) Run(run func(ski string, enable bool)) *Hub_RegisterRemoteSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Hub_RegisterRemoteSKI_Call) Return() *Hub_RegisterRemoteSKI_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_RegisterRemoteSKI_Call) RunAndReturn(run func(string, bool)) *Hub_RegisterRemoteSKI_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceForSKI provides a mock function with given fields: ski
func (_m *Hub) ServiceForSKI(ski string) *api.ServiceDetails {
	ret := _m.Called(ski)

	if len(ret) == 0 {
		panic("no return value specified for ServiceForSKI")
	}

	var r0 *api.ServiceDetails
	if rf, ok := ret.Get(0).(func(string) *api.ServiceDetails); ok {
		r0 = rf(ski)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ServiceDetails)
		}
	}

	return r0
}

// Hub_ServiceForSKI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceForSKI'
type Hub_ServiceForSKI_Call struct {
	*mock.Call
}

// ServiceForSKI is a helper method to define mock.On call
//   - ski string
func (_e *Hub_Expecter) ServiceForSKI(ski interface{}) *Hub_ServiceForSKI_Call {
	return &Hub_ServiceForSKI_Call{Call: _e.mock.On("ServiceForSKI", ski)}
}

func (_c *Hub_ServiceForSKI_Call) Run(run func(ski string)) *Hub_ServiceForSKI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Hub_ServiceForSKI_Call) Return(_a0 *api.ServiceDetails) *Hub_ServiceForSKI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hub_ServiceForSKI_Call) RunAndReturn(run func(string) *api.ServiceDetails) *Hub_ServiceForSKI_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *Hub) Shutdown() {
	_m.Called()
}

// Hub_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Hub_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *Hub_Expecter) Shutdown() *Hub_Shutdown_Call {
	return &Hub_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *Hub_Shutdown_Call) Run(run func()) *Hub_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hub_Shutdown_Call) Return() *Hub_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_Shutdown_Call) RunAndReturn(run func()) *Hub_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *Hub) Start() {
	_m.Called()
}

// Hub_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Hub_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Hub_Expecter) Start() *Hub_Start_Call {
	return &Hub_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Hub_Start_Call) Run(run func()) *Hub_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hub_Start_Call) Return() *Hub_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_Start_Call) RunAndReturn(run func()) *Hub_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartBrowseMdnsSearch provides a mock function with given fields:
func (_m *Hub) StartBrowseMdnsSearch() {
	_m.Called()
}

// Hub_StartBrowseMdnsSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartBrowseMdnsSearch'
type Hub_StartBrowseMdnsSearch_Call struct {
	*mock.Call
}

// StartBrowseMdnsSearch is a helper method to define mock.On call
func (_e *Hub_Expecter) StartBrowseMdnsSearch() *Hub_StartBrowseMdnsSearch_Call {
	return &Hub_StartBrowseMdnsSearch_Call{Call: _e.mock.On("StartBrowseMdnsSearch")}
}

func (_c *Hub_StartBrowseMdnsSearch_Call) Run(run func()) *Hub_StartBrowseMdnsSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hub_StartBrowseMdnsSearch_Call) Return() *Hub_StartBrowseMdnsSearch_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_StartBrowseMdnsSearch_Call) RunAndReturn(run func()) *Hub_StartBrowseMdnsSearch_Call {
	_c.Call.Return(run)
	return _c
}

// StopBrowseMdnsSearch provides a mock function with given fields:
func (_m *Hub) StopBrowseMdnsSearch() {
	_m.Called()
}

// Hub_StopBrowseMdnsSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopBrowseMdnsSearch'
type Hub_StopBrowseMdnsSearch_Call struct {
	*mock.Call
}

// StopBrowseMdnsSearch is a helper method to define mock.On call
func (_e *Hub_Expecter) StopBrowseMdnsSearch() *Hub_StopBrowseMdnsSearch_Call {
	return &Hub_StopBrowseMdnsSearch_Call{Call: _e.mock.On("StopBrowseMdnsSearch")}
}

func (_c *Hub_StopBrowseMdnsSearch_Call) Run(run func()) *Hub_StopBrowseMdnsSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hub_StopBrowseMdnsSearch_Call) Return() *Hub_StopBrowseMdnsSearch_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hub_StopBrowseMdnsSearch_Call) RunAndReturn(run func()) *Hub_StopBrowseMdnsSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewHub creates a new instance of Hub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHub(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hub {
	mock := &Hub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
