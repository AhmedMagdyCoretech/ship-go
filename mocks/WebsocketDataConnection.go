// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	api "github.com/enbility/ship-go/api"
	mock "github.com/stretchr/testify/mock"
)

// WebsocketDataConnection is an autogenerated mock type for the WebsocketDataConnection type
type WebsocketDataConnection struct {
	mock.Mock
}

type WebsocketDataConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *WebsocketDataConnection) EXPECT() *WebsocketDataConnection_Expecter {
	return &WebsocketDataConnection_Expecter{mock: &_m.Mock}
}

// CloseDataConnection provides a mock function with given fields: closeCode, reason
func (_m *WebsocketDataConnection) CloseDataConnection(closeCode int, reason string) {
	_m.Called(closeCode, reason)
}

// WebsocketDataConnection_CloseDataConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseDataConnection'
type WebsocketDataConnection_CloseDataConnection_Call struct {
	*mock.Call
}

// CloseDataConnection is a helper method to define mock.On call
//   - closeCode int
//   - reason string
func (_e *WebsocketDataConnection_Expecter) CloseDataConnection(closeCode interface{}, reason interface{}) *WebsocketDataConnection_CloseDataConnection_Call {
	return &WebsocketDataConnection_CloseDataConnection_Call{Call: _e.mock.On("CloseDataConnection", closeCode, reason)}
}

func (_c *WebsocketDataConnection_CloseDataConnection_Call) Run(run func(closeCode int, reason string)) *WebsocketDataConnection_CloseDataConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *WebsocketDataConnection_CloseDataConnection_Call) Return() *WebsocketDataConnection_CloseDataConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *WebsocketDataConnection_CloseDataConnection_Call) RunAndReturn(run func(int, string)) *WebsocketDataConnection_CloseDataConnection_Call {
	_c.Call.Return(run)
	return _c
}

// InitDataProcessing provides a mock function with given fields: _a0
func (_m *WebsocketDataConnection) InitDataProcessing(_a0 api.WebsocketDataProcessing) {
	_m.Called(_a0)
}

// WebsocketDataConnection_InitDataProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitDataProcessing'
type WebsocketDataConnection_InitDataProcessing_Call struct {
	*mock.Call
}

// InitDataProcessing is a helper method to define mock.On call
//   - _a0 api.WebsocketDataProcessing
func (_e *WebsocketDataConnection_Expecter) InitDataProcessing(_a0 interface{}) *WebsocketDataConnection_InitDataProcessing_Call {
	return &WebsocketDataConnection_InitDataProcessing_Call{Call: _e.mock.On("InitDataProcessing", _a0)}
}

func (_c *WebsocketDataConnection_InitDataProcessing_Call) Run(run func(_a0 api.WebsocketDataProcessing)) *WebsocketDataConnection_InitDataProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.WebsocketDataProcessing))
	})
	return _c
}

func (_c *WebsocketDataConnection_InitDataProcessing_Call) Return() *WebsocketDataConnection_InitDataProcessing_Call {
	_c.Call.Return()
	return _c
}

func (_c *WebsocketDataConnection_InitDataProcessing_Call) RunAndReturn(run func(api.WebsocketDataProcessing)) *WebsocketDataConnection_InitDataProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// IsDataConnectionClosed provides a mock function with given fields:
func (_m *WebsocketDataConnection) IsDataConnectionClosed() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDataConnectionClosed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebsocketDataConnection_IsDataConnectionClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDataConnectionClosed'
type WebsocketDataConnection_IsDataConnectionClosed_Call struct {
	*mock.Call
}

// IsDataConnectionClosed is a helper method to define mock.On call
func (_e *WebsocketDataConnection_Expecter) IsDataConnectionClosed() *WebsocketDataConnection_IsDataConnectionClosed_Call {
	return &WebsocketDataConnection_IsDataConnectionClosed_Call{Call: _e.mock.On("IsDataConnectionClosed")}
}

func (_c *WebsocketDataConnection_IsDataConnectionClosed_Call) Run(run func()) *WebsocketDataConnection_IsDataConnectionClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WebsocketDataConnection_IsDataConnectionClosed_Call) Return(_a0 bool, _a1 error) *WebsocketDataConnection_IsDataConnectionClosed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebsocketDataConnection_IsDataConnectionClosed_Call) RunAndReturn(run func() (bool, error)) *WebsocketDataConnection_IsDataConnectionClosed_Call {
	_c.Call.Return(run)
	return _c
}

// WriteMessageToDataConnection provides a mock function with given fields: _a0
func (_m *WebsocketDataConnection) WriteMessageToDataConnection(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WriteMessageToDataConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WebsocketDataConnection_WriteMessageToDataConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteMessageToDataConnection'
type WebsocketDataConnection_WriteMessageToDataConnection_Call struct {
	*mock.Call
}

// WriteMessageToDataConnection is a helper method to define mock.On call
//   - _a0 []byte
func (_e *WebsocketDataConnection_Expecter) WriteMessageToDataConnection(_a0 interface{}) *WebsocketDataConnection_WriteMessageToDataConnection_Call {
	return &WebsocketDataConnection_WriteMessageToDataConnection_Call{Call: _e.mock.On("WriteMessageToDataConnection", _a0)}
}

func (_c *WebsocketDataConnection_WriteMessageToDataConnection_Call) Run(run func(_a0 []byte)) *WebsocketDataConnection_WriteMessageToDataConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *WebsocketDataConnection_WriteMessageToDataConnection_Call) Return(_a0 error) *WebsocketDataConnection_WriteMessageToDataConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WebsocketDataConnection_WriteMessageToDataConnection_Call) RunAndReturn(run func([]byte) error) *WebsocketDataConnection_WriteMessageToDataConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebsocketDataConnection creates a new instance of WebsocketDataConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebsocketDataConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebsocketDataConnection {
	mock := &WebsocketDataConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
