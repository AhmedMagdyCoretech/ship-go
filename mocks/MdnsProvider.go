// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MdnsProvider is an autogenerated mock type for the MdnsProvider type
type MdnsProvider struct {
	mock.Mock
}

type MdnsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MdnsProvider) EXPECT() *MdnsProvider_Expecter {
	return &MdnsProvider_Expecter{mock: &_m.Mock}
}

// Announce provides a mock function with given fields: serviceName, port, txt
func (_m *MdnsProvider) Announce(serviceName string, port int, txt []string) error {
	ret := _m.Called(serviceName, port, txt)

	if len(ret) == 0 {
		panic("no return value specified for Announce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, []string) error); ok {
		r0 = rf(serviceName, port, txt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MdnsProvider_Announce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Announce'
type MdnsProvider_Announce_Call struct {
	*mock.Call
}

// Announce is a helper method to define mock.On call
//   - serviceName string
//   - port int
//   - txt []string
func (_e *MdnsProvider_Expecter) Announce(serviceName interface{}, port interface{}, txt interface{}) *MdnsProvider_Announce_Call {
	return &MdnsProvider_Announce_Call{Call: _e.mock.On("Announce", serviceName, port, txt)}
}

func (_c *MdnsProvider_Announce_Call) Run(run func(serviceName string, port int, txt []string)) *MdnsProvider_Announce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].([]string))
	})
	return _c
}

func (_c *MdnsProvider_Announce_Call) Return(_a0 error) *MdnsProvider_Announce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MdnsProvider_Announce_Call) RunAndReturn(run func(string, int, []string) error) *MdnsProvider_Announce_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAvailability provides a mock function with given fields:
func (_m *MdnsProvider) CheckAvailability() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckAvailability")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MdnsProvider_CheckAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAvailability'
type MdnsProvider_CheckAvailability_Call struct {
	*mock.Call
}

// CheckAvailability is a helper method to define mock.On call
func (_e *MdnsProvider_Expecter) CheckAvailability() *MdnsProvider_CheckAvailability_Call {
	return &MdnsProvider_CheckAvailability_Call{Call: _e.mock.On("CheckAvailability")}
}

func (_c *MdnsProvider_CheckAvailability_Call) Run(run func()) *MdnsProvider_CheckAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MdnsProvider_CheckAvailability_Call) Return(_a0 bool) *MdnsProvider_CheckAvailability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MdnsProvider_CheckAvailability_Call) RunAndReturn(run func() bool) *MdnsProvider_CheckAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveEntries provides a mock function with given fields: cancelChan, callback
func (_m *MdnsProvider) ResolveEntries(cancelChan chan bool, callback func(map[string]string, string, string, []net.IP, int, bool)) {
	_m.Called(cancelChan, callback)
}

// MdnsProvider_ResolveEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveEntries'
type MdnsProvider_ResolveEntries_Call struct {
	*mock.Call
}

// ResolveEntries is a helper method to define mock.On call
//   - cancelChan chan bool
//   - callback func(map[string]string , string , string , []net.IP , int , bool)
func (_e *MdnsProvider_Expecter) ResolveEntries(cancelChan interface{}, callback interface{}) *MdnsProvider_ResolveEntries_Call {
	return &MdnsProvider_ResolveEntries_Call{Call: _e.mock.On("ResolveEntries", cancelChan, callback)}
}

func (_c *MdnsProvider_ResolveEntries_Call) Run(run func(cancelChan chan bool, callback func(map[string]string, string, string, []net.IP, int, bool))) *MdnsProvider_ResolveEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan bool), args[1].(func(map[string]string, string, string, []net.IP, int, bool)))
	})
	return _c
}

func (_c *MdnsProvider_ResolveEntries_Call) Return() *MdnsProvider_ResolveEntries_Call {
	_c.Call.Return()
	return _c
}

func (_c *MdnsProvider_ResolveEntries_Call) RunAndReturn(run func(chan bool, func(map[string]string, string, string, []net.IP, int, bool))) *MdnsProvider_ResolveEntries_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MdnsProvider) Shutdown() {
	_m.Called()
}

// MdnsProvider_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MdnsProvider_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MdnsProvider_Expecter) Shutdown() *MdnsProvider_Shutdown_Call {
	return &MdnsProvider_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MdnsProvider_Shutdown_Call) Run(run func()) *MdnsProvider_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MdnsProvider_Shutdown_Call) Return() *MdnsProvider_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MdnsProvider_Shutdown_Call) RunAndReturn(run func()) *MdnsProvider_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Unannounce provides a mock function with given fields:
func (_m *MdnsProvider) Unannounce() {
	_m.Called()
}

// MdnsProvider_Unannounce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unannounce'
type MdnsProvider_Unannounce_Call struct {
	*mock.Call
}

// Unannounce is a helper method to define mock.On call
func (_e *MdnsProvider_Expecter) Unannounce() *MdnsProvider_Unannounce_Call {
	return &MdnsProvider_Unannounce_Call{Call: _e.mock.On("Unannounce")}
}

func (_c *MdnsProvider_Unannounce_Call) Run(run func()) *MdnsProvider_Unannounce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MdnsProvider_Unannounce_Call) Return() *MdnsProvider_Unannounce_Call {
	_c.Call.Return()
	return _c
}

func (_c *MdnsProvider_Unannounce_Call) RunAndReturn(run func()) *MdnsProvider_Unannounce_Call {
	_c.Call.Return(run)
	return _c
}

// NewMdnsProvider creates a new instance of MdnsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMdnsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MdnsProvider {
	mock := &MdnsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
